{"version":3,"sources":["skylark-langx-numerics.js"],"names":["define","skylark","types","attach","toFinite","toNumber","toInteger","numerics","_lut","i","toString","maths","DEG2RAD","Math","PI","RAD2DEG","clamp","value","min","max","euclideanModulo","n","m","mapLinear","x","a1","a2","b1","b2","lerp","y","t","smoothstep","smootherstep","randInt","low","high","floor","random","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","pow","ceil","log","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","console","warn","klasss","Quaternion","klass","klassName","get","this","_x","_onChangeCallback","_y","z","_z","w","_w","clone","constructor","copy","quaternion","setFromEuler","euler","update","isEuler","Error","c1","c3","s1","s3","setFromAxisAngle","axis","angle","halfAngle","s","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","sqrt","setFromUnitVectors","vFrom","vTo","r","dot","abs","normalize","angleTo","acos","rotateTowards","step","slerp","inverse","conjugate","v","lengthSq","length","l","multiply","p","undefined","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sqrSinHalfTheta","Number","EPSILON","sinHalfTheta","halfTheta","atan2","ratioA","ratioB","equals","fromArray","array","offset","toArray","fromBufferAttribute","attribute","index","getX","getY","getZ","getW","_onChange","callback","_construct","Object","assign","qa","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","f","prototype","_vector","Vector3","_quaternion","setScalar","scalar","setX","setY","setZ","setComponent","getComponent","add","addVectors","addScalar","addScaledVector","sub","subVectors","subScalar","multiplyVectors","multiplyScalar","applyEuler","error","applyQuaternion","applyAxisAngle","applyMatrix3","e","applyNormalMatrix","applyMatrix4","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","manhattanLength","setLength","alpha","lerpVectors","v1","v2","cross","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","reflect","normal","theta","MathUtils","distanceTo","distanceToSquared","dx","dy","dz","manhattanDistanceTo","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","setFromMatrix3Column","_v1","_m1","Matrix4","_zero","_one","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","identity","me","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","d","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","lookAt","eye","target","up","multiplyMatrices","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","determinant","transpose","tmp","setPosition","isVector3","getInverse","throwOnDegenerate","t11","t12","t13","t14","det","detInv","scale","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","makeShear","position","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","decompose","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","h","matrix","arguments","_matrix","Euler","_order","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","DefaultOrder","RotationOrders","Matrix3","isMatrix3","setFromMatrix4","g","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","rotation","cx","cy","rotate","translate","Transform","_","MatrixTransform","inherit","transform","point","transformBounds","rect","_vector1","_vector2","_normalMatrix","Plane","constant","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","plane","inverseNormalLength","distanceToPoint","distanceToSphere","sphere","center","projectPoint","intersectLine","line","direction","delta","start","intersectsLine","startSign","endSign","end","intersectsBox","box","intersectsPlane","intersectsSphere","coplanarPoint","optionalNormalMatrix","normalMatrix","referencePoint","Matrix","RotateTransform","rotateAt","centerX","centerY","init","ScaleTransform","scaleAt","SkewTransform","skewX","skewY","Vector2","rotateAround","DEG_TO_RAD","_degToRadCache","degree","TransformMatrix","_multiplyPoint","shadow","compositeOperation","multiplyPoint","multiplyRectangle","isIdentity","p0","leftTop","p1","leftBottom","p2","p3","rightBottom","minx","miny","maxx","maxy","Rect","prepend","tx1","append","d1","prependMatrix","prependProperties","appendMatrix","appendProperties","prependTransform","regX","regY","appendTransform","skew","invert","reinitialize","_initialize","mtx","rotateg","tan","skewXg","skewYg","n2","yx","_sandwich","rotategAt","skewXAt","skewXgAt","skewYAt","skewYgAt","Point","TranslateTransform","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","main"],"mappings":"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","file":"../skylark-langx-numerics.js","sourcesContent":["define('skylark-langx-numerics/numerics',[\r\n    \"skylark-langx-ns\",\r\n    \"skylark-langx-types\"\r\n],function(skylark,types){\r\n\r\n\treturn  skylark.attach(\"langx.numerics\",{\r\n\t\ttoFinite : types.toFinite,\r\n\t\ttoNumber : types.toNumber,\r\n\t\ttoInteger : types.toInteger\r\n\t});\r\n});\ndefine('skylark-langx-numerics/maths',[\r\n    \"skylark-langx-ns\",\r\n    \"skylark-langx-types\",\r\n    \"./numerics\"\r\n],function(skylark,types,numerics){\r\n\r\n\r\n\tvar _lut = [];\r\n\r\n\tfor ( var i = 0; i < 256; i ++ ) {\r\n\r\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\r\n\r\n\t}\r\n\r\n\tvar maths = {\r\n\r\n\t\tDEG2RAD: Math.PI / 180,\r\n\t\tRAD2DEG: 180 / Math.PI,\r\n\r\n\r\n\r\n\t\tclamp: function ( value, min, max ) {\r\n\r\n\t\t\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n\t\t},\r\n\r\n\t\t// compute euclidian modulo of m % n\r\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n\t\teuclideanModulo: function ( n, m ) {\r\n\r\n\t\t\treturn ( ( n % m ) + m ) % m;\r\n\r\n\t\t},\r\n\r\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t\t},\r\n\r\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\r\n\r\n\t\tlerp: function ( x, y, t ) {\r\n\r\n\t\t\treturn ( 1 - t ) * x + t * y;\r\n\r\n\t\t},\r\n\r\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\r\n\t\tsmoothstep: function ( x, min, max ) {\r\n\r\n\t\t\tif ( x <= min ) return 0;\r\n\t\t\tif ( x >= max ) return 1;\r\n\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t\t},\r\n\r\n\t\tsmootherstep: function ( x, min, max ) {\r\n\r\n\t\t\tif ( x <= min ) return 0;\r\n\t\t\tif ( x >= max ) return 1;\r\n\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n\t\t},\r\n\r\n\t\t// Random integer from <low, high> interval\r\n\r\n\t\trandInt: function ( low, high ) {\r\n\r\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t\t},\r\n\r\n\t\t// Random float from <low, high> interval\r\n\r\n\t\trandFloat: function ( low, high ) {\r\n\r\n\t\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t\t},\r\n\r\n\t\t// Random float from <-range/2, range/2> interval\r\n\r\n\t\trandFloatSpread: function ( range ) {\r\n\r\n\t\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t\t},\r\n\r\n\t\tdegToRad: function ( degrees ) {\r\n\r\n\t\t\treturn degrees * maths.DEG2RAD;\r\n\r\n\t\t},\r\n\r\n\t\tradToDeg: function ( radians ) {\r\n\r\n\t\t\treturn radians * maths.RAD2DEG;\r\n\r\n\t\t},\r\n\r\n\t\tisPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n\t\t},\r\n\r\n\t\tceilPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloorPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t\t},\r\n\r\n\t\tsetQuaternionFromProperEuler: function ( q, a, b, c, order ) {\r\n\r\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\r\n\r\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\r\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\r\n\t\t\t// angles are in radians\r\n\r\n\t\t\tvar cos = Math.cos;\r\n\t\t\tvar sin = Math.sin;\r\n\r\n\t\t\tvar c2 = cos( b / 2 );\r\n\t\t\tvar s2 = sin( b / 2 );\r\n\r\n\t\t\tvar c13 = cos( ( a + c ) / 2 );\r\n\t\t\tvar s13 = sin( ( a + c ) / 2 );\r\n\r\n\t\t\tvar c1_3 = cos( ( a - c ) / 2 );\r\n\t\t\tvar s1_3 = sin( ( a - c ) / 2 );\r\n\r\n\t\t\tvar c3_1 = cos( ( c - a ) / 2 );\r\n\t\t\tvar s3_1 = sin( ( c - a ) / 2 );\r\n\r\n\t\t\tif ( order === 'XYX' ) {\r\n\r\n\t\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\r\n\r\n\t\t\t} else if ( order === 'YZY' ) {\r\n\r\n\t\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\r\n\r\n\t\t\t} else if ( order === 'ZXZ' ) {\r\n\r\n\t\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\r\n\r\n\t\t\t} else if ( order === 'XZX' ) {\r\n\r\n\t\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\r\n\r\n\t\t\t} else if ( order === 'YXY' ) {\r\n\r\n\t\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\r\n\r\n\t\t\t} else if ( order === 'ZYZ' ) {\r\n\r\n\t\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\r\n\treturn  numerics.maths = maths;\r\n});\ndefine('skylark-langx-numerics/Quaternion',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./numerics\",\r\n\t\"./maths\"\r\n] ,function(klasss,numerics,maths) {\r\n\r\n\tvar Quaternion = klass({\r\n\t\t\"klassName\" : \"Quaternion\",\r\n\r\n\t\tx: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._x = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ty: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._y = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tz: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._z = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tw: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._w;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._w = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._w = w;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( quaternion ) {\r\n\r\n\t\t\tthis._x = quaternion.x;\r\n\t\t\tthis._y = quaternion.y;\r\n\t\t\tthis._z = quaternion.z;\r\n\t\t\tthis._w = quaternion.w;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromEuler: function ( euler, update ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'mathsQuaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\r\n\r\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\t\tvar cos = Math.cos;\r\n\t\t\tvar sin = Math.sin;\r\n\r\n\t\t\tvar c1 = cos( x / 2 );\r\n\t\t\tvar c2 = cos( y / 2 );\r\n\t\t\tvar c3 = cos( z / 2 );\r\n\r\n\t\t\tvar s1 = sin( x / 2 );\r\n\t\t\tvar s2 = sin( y / 2 );\r\n\t\t\tvar s3 = sin( z / 2 );\r\n\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( update !== false ) this._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t\t// assumes axis is normalized\r\n\r\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\t\tthis._x = axis.x * s;\r\n\t\t\tthis._y = axis.y * s;\r\n\t\t\tthis._z = axis.z * s;\r\n\t\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar te = m.elements,\r\n\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\t\ts;\r\n\r\n\t\t\tif ( trace > 0 ) {\r\n\r\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\t\tthis._w = 0.25 / s;\r\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\t\tthis._x = 0.25 * s;\r\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._y = 0.25 * s;\r\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\r\n\r\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\t\tvar EPS = 0.000001;\r\n\r\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\r\n\r\n\t\t\tif ( r < EPS ) {\r\n\r\n\t\t\t\tr = 0;\r\n\r\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\t\tthis._x = - vFrom.y;\r\n\t\t\t\t\tthis._y = vFrom.x;\r\n\t\t\t\t\tthis._z = 0;\r\n\t\t\t\t\tthis._w = r;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = - vFrom.z;\r\n\t\t\t\t\tthis._z = vFrom.y;\r\n\t\t\t\t\tthis._w = r;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\r\n\r\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\r\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\r\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tangleTo: function ( q ) {\r\n\r\n\t\t\treturn 2 * Math.acos( Math.abs( maths.clamp( this.dot( q ), - 1, 1 ) ) );\r\n\r\n\t\t},\r\n\r\n\t\trotateTowards: function ( q, step ) {\r\n\r\n\t\t\tvar angle = this.angleTo( q );\r\n\r\n\t\t\tif ( angle === 0 ) return this;\r\n\r\n\t\t\tvar t = Math.min( 1, step / angle );\r\n\r\n\t\t\tthis.slerp( q, t );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tinverse: function () {\r\n\r\n\t\t\t// quaternion is assumed to have unit length\r\n\r\n\t\t\treturn this.conjugate();\r\n\r\n\t\t},\r\n\r\n\t\tconjugate: function () {\r\n\r\n\t\t\tthis._x *= - 1;\r\n\t\t\tthis._y *= - 1;\r\n\t\t\tthis._z *= - 1;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\tvar l = this.length();\r\n\r\n\t\t\tif ( l === 0 ) {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = 0;\r\n\t\t\t\tthis._w = 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl = 1 / l;\r\n\r\n\t\t\t\tthis._x = this._x * l;\r\n\t\t\t\tthis._y = this._y * l;\r\n\t\t\t\tthis._z = this._z * l;\r\n\t\t\t\tthis._w = this._w * l;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( q, p ) {\r\n\r\n\t\t\tif ( p !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'mathsQuaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( q ) {\r\n\r\n\t\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tslerp: function ( qb, t ) {\r\n\r\n\t\t\tif ( t === 0 ) return this;\r\n\t\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\t\tthis._w = - qb._w;\r\n\t\t\t\tthis._x = - qb._x;\r\n\t\t\t\tthis._y = - qb._y;\r\n\t\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.copy( qb );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\t\tthis._w = w;\r\n\t\t\t\tthis._x = x;\r\n\t\t\t\tthis._y = y;\r\n\t\t\t\tthis._z = z;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\r\n\r\n\t\t\t\tvar s = 1 - t;\r\n\t\t\t\tthis._w = s * w + t * this._w;\r\n\t\t\t\tthis._x = s * x + t * this._x;\r\n\t\t\t\tthis._y = s * y + t * this._y;\r\n\t\t\t\tthis._z = s * z + t * this._z;\r\n\r\n\t\t\t\tthis.normalize();\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\r\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( quaternion ) {\r\n\r\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tthis._x = array[ offset ];\r\n\t\t\tthis._y = array[ offset + 1 ];\r\n\t\t\tthis._z = array[ offset + 2 ];\r\n\t\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index ) {\r\n\r\n\t\t\tthis._x = attribute.getX( index );\r\n\t\t\tthis._y = attribute.getY( index );\r\n\t\t\tthis._z = attribute.getZ( index );\r\n\t\t\tthis._w = attribute.getW( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t_onChange: function ( callback ) {\r\n\r\n\t\t\tthis._onChangeCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t_onChangeCallback: function () {},\r\n\r\n\r\n\t\t\"_construct\" : function ( x, y, z, w ) {\r\n\r\n\t\t\tthis._x = x || 0;\r\n\t\t\tthis._y = y || 0;\r\n\t\t\tthis._z = z || 0;\r\n\t\t\tthis._w = ( w !== undefined ) ? w : 1;\r\n\r\n\t\t}\r\n\r\n\r\n\t})\r\n\r\n\r\n\tObject.assign( Quaternion, {\r\n\r\n\t\tslerp: function ( qa, qb, qm, t ) {\r\n\r\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n\t\t},\r\n\r\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\r\n\r\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\r\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\t\tvar s = 1 - t,\r\n\r\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\r\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar tDir = t * dir;\r\n\r\n\t\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\t\tx0 *= f;\r\n\t\t\t\t\ty0 *= f;\r\n\t\t\t\t\tz0 *= f;\r\n\t\t\t\t\tw0 *= f;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdst[ dstOffset ] = x0;\r\n\t\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Quaternion.prototype, {\r\n\r\n\r\n\t} );\r\n\r\n\r\n\treturn numerics.Quaternion = Quaternion;\r\n\r\n\r\n});\ndefine('skylark-langx-numerics/Vector3',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./numerics\",\r\n\t\"./maths\",\r\n\t\"./Quaternion\"\r\n] ,function(\r\n\tklass,\r\n\tnumerics,\r\n\tmaths,\r\n\tQuaternion\r\n) {\r\n\r\n\r\n\tvar _vector = new Vector3();\r\n\tvar _quaternion = new Quaternion();\r\n\r\n\tvar Vector3 = klass({\r\n\t\t\"klassName\" : \"Vector3\",\r\n\r\n\t\tset: function ( x, y, z ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\t\tthis.z = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( z ) {\r\n\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'mathsVector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'mathsVector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'mathsVector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\t\t\tthis.z *= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x * b.x;\r\n\t\t\tthis.y = a.y * b.y;\r\n\t\t\tthis.z = a.z * b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyEuler: function ( euler ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tconsole.error( 'mathsVector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\r\n\r\n\t\t},\r\n\r\n\t\tapplyAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix3: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyNormalMatrix: function ( m ) {\r\n\r\n\t\t\treturn this.applyMatrix3( m ).normalize();\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyQuaternion: function ( q ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t\t// calculate quat * vector\r\n\r\n\t\t\tvar ix = qw * x + qy * z - qz * y;\r\n\t\t\tvar iy = qw * y + qz * x - qx * z;\r\n\t\t\tvar iz = qw * z + qx * y - qy * x;\r\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t\t// calculate result * inverse quat\r\n\r\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tproject: function ( camera ) {\r\n\r\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\tunproject: function ( camera ) {\r\n\r\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\ttransformDirection: function ( m ) {\r\n\r\n\t\t\t// input: mathsMatrix4 affine matrix\r\n\t\t\t// vector interpreted as a direction\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tdivide: function ( v ) {\r\n\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\t\t\tthis.z /= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t\t},\r\n\r\n\t\t// TODO lengthSquared?\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tcross: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'mathsVector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.crossVectors( this, v );\r\n\r\n\t\t},\r\n\r\n\t\tcrossVectors: function ( a, b ) {\r\n\r\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\t\tthis.x = ay * bz - az * by;\r\n\t\t\tthis.y = az * bx - ax * bz;\r\n\t\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tprojectOnVector: function ( v ) {\r\n\r\n\t\t\tvar denominator = v.lengthSq();\r\n\r\n\t\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\r\n\r\n\t\t\tvar scalar = v.dot( this ) / denominator;\r\n\r\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\r\n\r\n\t\t},\r\n\r\n\t\tprojectOnPlane: function ( planeNormal ) {\r\n\r\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\t\treturn this.sub( _vector );\r\n\r\n\t\t},\r\n\r\n\t\treflect: function ( normal ) {\r\n\r\n\t\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t\t// normal is assumed to have unit length\r\n\r\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tangleTo: function ( v ) {\r\n\r\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\r\n\r\n\t\t\tif ( denominator === 0 ) return Math.PI / 2;\r\n\r\n\t\t\tvar theta = this.dot( v ) / denominator;\r\n\r\n\t\t\t// clamp, to handle numerical problems\r\n\r\n\t\t\treturn Math.acos( MathUtils.clamp( theta, - 1, 1 ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSquared: function ( v ) {\r\n\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromSpherical: function ( s ) {\r\n\r\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\r\n\r\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\r\n\r\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\r\n\t\t\tthis.y = Math.cos( phi ) * radius;\r\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCylindrical: function ( c ) {\r\n\r\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\r\n\r\n\t\t\tthis.x = radius * Math.sin( theta );\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = radius * Math.cos( theta );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixPosition: function ( m ) {\r\n\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 12 ];\r\n\t\t\tthis.y = e[ 13 ];\r\n\t\t\tthis.z = e[ 14 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixScale: function ( m ) {\r\n\r\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tthis.x = sx;\r\n\t\t\tthis.y = sy;\r\n\t\t\tthis.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixColumn: function ( m, index ) {\r\n\r\n\t\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrix3Column: function ( m, index ) {\r\n\r\n\t\t\treturn this.fromArray( m.elements, index * 3 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'mathsVector3: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\t\t\tthis.z = attribute.getZ( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\r\n\t\t\"_construct\" : function ( x, y, z ) {\r\n\r\n\t\t\tthis.x = x || 0;\r\n\t\t\tthis.y = y || 0;\r\n\t\t\tthis.z = z || 0;\r\n\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\treturn numerics.Vector3 = Vector3;\r\n});\ndefine('skylark-langx-numerics/Matrix4',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./numerics\",\r\n\t\"./Vector3\"\r\n] ,function(\r\n\tklass,\r\n\tnumerics,\r\n\tVector3\r\n) {\r\n\r\n\tvar _v1 = new Vector3();\r\n\tvar _m1 = new Matrix4();\r\n\tvar _zero = new Vector3( 0, 0, 0 );\r\n\tvar _one = new Vector3( 1, 1, 1 );\r\n\tvar _x = new Vector3();\r\n\tvar _y = new Vector3();\r\n\tvar _z = new Vector3();\r\n\r\n\tvar Matrix4 = klass({\r\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tidentity: function () {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, 1, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new Matrix4().fromArray( this.elements );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\r\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\r\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\r\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyPosition: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements, me = m.elements;\r\n\r\n\t\t\tte[ 12 ] = me[ 12 ];\r\n\t\t\tte[ 13 ] = me[ 13 ];\r\n\t\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\t\tthis.set(\r\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\textractRotation: function ( m ) {\r\n\r\n\t\t\t// this method does not support reflection matrices\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\t\tte[ 3 ] = 0;\r\n\r\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\t\tte[ 7 ] = 0;\r\n\r\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationFromEuler: function ( euler ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tconsole.error( 'mathsMatrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - c * f;\r\n\t\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\t\tte[ 1 ] = a * f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\t\tte[ 4 ] = - a * f;\r\n\t\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\t\tte[ 2 ] = - a * d;\r\n\t\t\t\tte[ 6 ] = b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\t\tte[ 1 ] = c * f;\r\n\t\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\t\tte[ 2 ] = - d;\r\n\t\t\t\tte[ 6 ] = b * c;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\t\tte[ 1 ] = f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\t\tte[ 2 ] = - d * e;\r\n\t\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - f;\r\n\t\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\t\tte[ 6 ] = b * e;\r\n\t\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bottom row\r\n\t\t\tte[ 3 ] = 0;\r\n\t\t\tte[ 7 ] = 0;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\t// last column\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t\treturn this.compose( _zero, q, _one );\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( eye, target, up ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\t_z.subVectors( eye, target );\r\n\r\n\t\t\tif ( _z.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t// eye and target are in the same position\r\n\r\n\t\t\t\t_z.z = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_z.normalize();\r\n\t\t\t_x.crossVectors( up, _z );\r\n\r\n\t\t\tif ( _x.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t// up and z are parallel\r\n\r\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\r\n\r\n\t\t\t\t\t_z.x += 0.0001;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_z.z += 0.0001;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_z.normalize();\r\n\t\t\t\t_x.crossVectors( up, _z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_x.normalize();\r\n\t\t\t_y.crossVectors( _z, _x );\r\n\r\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\r\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\r\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( m, n ) {\r\n\r\n\t\t\tif ( n !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'mathsMatrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\t\tvar ae = a.elements;\r\n\t\t\tvar be = b.elements;\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdeterminant: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t\t//TODO: make this more efficient\r\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\t\treturn (\r\n\t\t\t\tn41 * (\r\n\t\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t\t - n12 * n23 * n34\r\n\t\t\t\t) +\r\n\t\t\t\tn42 * (\r\n\t\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t\t - n14 * n23 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn43 * (\r\n\t\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t\t - n12 * n24 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn44 * (\r\n\t\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t\t + n12 * n23 * n31\r\n\t\t\t\t)\r\n\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\ttranspose: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar tmp;\r\n\r\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetPosition: function ( x, y, z ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t\tte[ 12 ] = x.x;\r\n\t\t\t\tte[ 13 ] = x.y;\r\n\t\t\t\tte[ 14 ] = x.z;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tte[ 12 ] = x;\r\n\t\t\t\tte[ 13 ] = y;\r\n\t\t\t\tte[ 14 ] = z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\r\n\r\n\t\t\tif ( throwOnDegenerate !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"mathsMatrix4: .getInverse() can no longer be configured to throw on degenerate.\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\t\tvar te = this.elements,\r\n\t\t\t\tme = m.elements,\r\n\r\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\r\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\r\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\r\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\r\n\r\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\r\n\r\n\t\t\tvar detInv = 1 / det;\r\n\r\n\t\t\tte[ 0 ] = t11 * detInv;\r\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 4 ] = t12 * detInv;\r\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 8 ] = t13 * detInv;\r\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 12 ] = t14 * detInv;\r\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( v ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t\t},\r\n\r\n\t\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, x,\r\n\t\t\t\t0, 1, 0, y,\r\n\t\t\t\t0, 0, 1, z,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationX: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, c, - s, 0,\r\n\t\t\t\t0, s, c, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationY: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t c, 0, s, 0,\r\n\t\t\t\t 0, 1, 0, 0,\r\n\t\t\t\t- s, 0, c, 0,\r\n\t\t\t\t 0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tc, - s, 0, 0,\r\n\t\t\t\ts, c, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\t\tvar c = Math.cos( angle );\r\n\t\t\tvar s = Math.sin( angle );\r\n\t\t\tvar t = 1 - c;\r\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\t return this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tx, 0, 0, 0,\r\n\t\t\t\t0, y, 0, 0,\r\n\t\t\t\t0, 0, z, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeShear: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, y, z, 0,\r\n\t\t\t\tx, 1, z, 0,\r\n\t\t\t\tx, y, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcompose: function ( position, quaternion, scale ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\r\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\r\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\r\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\r\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\r\n\t\t\tte[ 3 ] = 0;\r\n\r\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\r\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\r\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\r\n\t\t\tte[ 7 ] = 0;\r\n\r\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\r\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\r\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\tte[ 12 ] = position.x;\r\n\t\t\tte[ 13 ] = position.y;\r\n\t\t\tte[ 14 ] = position.z;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdecompose: function ( position, quaternion, scale ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\tvar det = this.determinant();\r\n\t\t\tif ( det < 0 ) sx = - sx;\r\n\r\n\t\t\tposition.x = te[ 12 ];\r\n\t\t\tposition.y = te[ 13 ];\r\n\t\t\tposition.z = te[ 14 ];\r\n\r\n\t\t\t// scale the rotation part\r\n\t\t\t_m1.copy( this );\r\n\r\n\t\t\tvar invSX = 1 / sx;\r\n\t\t\tvar invSY = 1 / sy;\r\n\t\t\tvar invSZ = 1 / sz;\r\n\r\n\t\t\t_m1.elements[ 0 ] *= invSX;\r\n\t\t\t_m1.elements[ 1 ] *= invSX;\r\n\t\t\t_m1.elements[ 2 ] *= invSX;\r\n\r\n\t\t\t_m1.elements[ 4 ] *= invSY;\r\n\t\t\t_m1.elements[ 5 ] *= invSY;\r\n\t\t\t_m1.elements[ 6 ] *= invSY;\r\n\r\n\t\t\t_m1.elements[ 8 ] *= invSZ;\r\n\t\t\t_m1.elements[ 9 ] *= invSZ;\r\n\t\t\t_m1.elements[ 10 ] *= invSZ;\r\n\r\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\r\n\r\n\t\t\tscale.x = sx;\r\n\t\t\tscale.y = sy;\r\n\t\t\tscale.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\t\tif ( far === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'mathsMatrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = 2 * near / ( right - left );\r\n\t\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\t\tvar a = ( right + left ) / ( right - left );\r\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar w = 1.0 / ( right - left );\r\n\t\t\tvar h = 1.0 / ( top - bottom );\r\n\t\t\tvar p = 1.0 / ( far - near );\r\n\r\n\t\t\tvar x = ( right + left ) * w;\r\n\t\t\tvar y = ( top + bottom ) * h;\r\n\t\t\tvar z = ( far + near ) * p;\r\n\r\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( matrix ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = matrix.elements;\r\n\r\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\r\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\t\"_construct\" : function() {\r\n\r\n\t\t\tthis.elements = [\r\n\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, 1, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t];\r\n\r\n\t\t\tif ( arguments.length > 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'mathsMatrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\r\n\r\n\treturn numerics.Matrix4 =  Matrix4 ;\r\n\r\n});\ndefine('skylark-langx-numerics/Euler',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./numerics\",\r\n\t\"./maths\",\r\n\t\"./Quaternion\",\r\n\t\"./Vector3\",\r\n\t\"./Matrix4\"\r\n] ,function(\r\n\tklass,\r\n\tnumerics,\r\n\tmaths,\r\n\tQuaternion,\r\n\tVector3,\r\n\tMatrix4\r\n) {\r\n\r\n\tvar _matrix = new Matrix4();\r\n\tvar _quaternion = new Quaternion();\r\n\r\n\tvar Euler = klass({\r\n\t\tx: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._x = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ty: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._y = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tz: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._z = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\torder: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._order;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._order = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tisEuler: true,\r\n\r\n\t\tset: function ( x, y, z, order ) {\r\n\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._order = order || this._order;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( euler ) {\r\n\r\n\t\t\tthis._x = euler._x;\r\n\t\t\tthis._y = euler._y;\r\n\t\t\tthis._z = euler._z;\r\n\t\t\tthis._order = euler._order;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\r\n\t\t\tvar clamp = maths.clamp;\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar te = m.elements;\r\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\t\torder = order || this._order;\r\n\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'skylark-nunustudio/editor/gui/element/RendererCanvasEuler: .setFromRotationMatrix() given unsupported order: ' + order );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._order = order;\r\n\r\n\t\t\tif ( update !== false ) this._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromQuaternion: function ( q, order, update ) {\r\n\r\n\t\t\t_matrix.makeRotationFromQuaternion( q );\r\n\r\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromVector3: function ( v, order ) {\r\n\r\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\r\n\t\t},\r\n\r\n\t\treorder: function ( newOrder ) {\r\n\r\n\t\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\t\t_quaternion.setFromEuler( this );\r\n\r\n\t\t\treturn this.setFromQuaternion( _quaternion, newOrder );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( euler ) {\r\n\r\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array ) {\r\n\r\n\t\t\tthis._x = array[ 0 ];\r\n\t\t\tthis._y = array[ 1 ];\r\n\t\t\tthis._z = array[ 2 ];\r\n\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\ttoVector3: function ( optionalResult ) {\r\n\r\n\t\t\tif ( optionalResult ) {\r\n\r\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_onChange: function ( callback ) {\r\n\r\n\t\t\tthis._onChangeCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t_onChangeCallback: function () {},\r\n\r\n\r\n\t\t\"_construct\" : function ( x, y, z, order ) {\r\n\r\n\t\t\tthis._x = x || 0;\r\n\t\t\tthis._y = y || 0;\r\n\t\t\tthis._z = z || 0;\r\n\t\t\tthis._order = order || Euler.DefaultOrder;\r\n\r\n\t\t}\r\n\r\n\r\n\t});\r\n\r\n\r\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\r\n\tEuler.DefaultOrder = 'XYZ';\r\n\r\n\r\n\treturn numerics.Euler = Euler ;\r\n});\r\n\ndefine('skylark-langx-numerics/Matrix3',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./numerics\"\r\n] ,function(klass,numerics) {\r\n\r\n\tvar Matrix3 = klass({\r\n\t\t\"klassName\" : \"Matrix3\",\r\n\r\n\t\tisMatrix3: true,\r\n\r\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tidentity: function () {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0,\r\n\t\t\t\t0, 1, 0,\r\n\t\t\t\t0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\r\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\r\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\t\txAxis.setFromMatrix3Column( this, 0 );\r\n\t\t\tyAxis.setFromMatrix3Column( this, 1 );\r\n\t\t\tzAxis.setFromMatrix3Column( this, 2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrix4: function ( m ) {\r\n\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\r\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\r\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\t\tvar ae = a.elements;\r\n\t\t\tvar be = b.elements;\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\r\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\r\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\r\n\r\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\r\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\r\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\r\n\r\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\r\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\r\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\r\n\r\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\r\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\r\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\r\n\r\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\r\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\r\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdeterminant: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t\t},\r\n\r\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\r\n\r\n\t\t\tif ( throwOnDegenerate !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"mathsMatrix3: .getInverse() can no longer be configured to throw on degenerate.\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar me = matrix.elements,\r\n\t\t\t\tte = this.elements,\r\n\r\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\r\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\r\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\r\n\r\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\r\n\r\n\t\t\tvar detInv = 1 / det;\r\n\r\n\t\t\tte[ 0 ] = t11 * detInv;\r\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\r\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\r\n\r\n\t\t\tte[ 3 ] = t12 * detInv;\r\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\r\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\r\n\r\n\t\t\tte[ 6 ] = t13 * detInv;\r\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\r\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranspose: function () {\r\n\r\n\t\t\tvar tmp, m = this.elements;\r\n\r\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetNormalMatrix: function ( matrix4 ) {\r\n\r\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\r\n\r\n\t\t},\r\n\r\n\t\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\t\tvar m = this.elements;\r\n\r\n\t\t\tr[ 0 ] = m[ 0 ];\r\n\t\t\tr[ 1 ] = m[ 3 ];\r\n\t\t\tr[ 2 ] = m[ 6 ];\r\n\t\t\tr[ 3 ] = m[ 1 ];\r\n\t\t\tr[ 4 ] = m[ 4 ];\r\n\t\t\tr[ 5 ] = m[ 7 ];\r\n\t\t\tr[ 6 ] = m[ 2 ];\r\n\t\t\tr[ 7 ] = m[ 5 ];\r\n\t\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\t\t\tvar c = Math.cos( rotation );\r\n\t\t\tvar s = Math.sin( rotation );\r\n\r\n\t\t\tthis.set(\r\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t\t\t0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( sx, sy ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\r\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotate: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta );\r\n\t\t\tvar s = Math.sin( theta );\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\r\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\r\n\r\n\t\t\tte[ 0 ] = c * a11 + s * a21;\r\n\t\t\tte[ 3 ] = c * a12 + s * a22;\r\n\t\t\tte[ 6 ] = c * a13 + s * a23;\r\n\r\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\r\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\r\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( tx, ty ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\r\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( matrix ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = matrix.elements;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\r\n\t\t\"_construct\" : function () {\r\n\r\n\t\t\tthis.elements = [\r\n\r\n\t\t\t\t1, 0, 0,\r\n\t\t\t\t0, 1, 0,\r\n\t\t\t\t0, 0, 1\r\n\r\n\t\t\t];\r\n\r\n\t\t\tif ( arguments.length > 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'Matrix3: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\treturn numerics.Matrix3 = Matrix3;\r\n});\ndefine('skylark-langx-numerics/Transform',[\r\n\t\"skylark-langx-klass\",\t\r\n    \"./numerics\",\r\n], function(klass,numerics) {\r\n\r\n    var Transform =  klass({\r\n        \"klassName\": \"Transform\",\r\n\t\t\"value\": {\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this._.value;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn numerics.Transform =Transform;\r\n});\r\n\ndefine('skylark-langx-numerics/MatrixTransform',[\r\n    \"./numerics\",\r\n\t\"./Transform\"\r\n],function(numerics,Transform) {\r\n\r\n    var MatrixTransform =  Transform.inherit({\r\n        \"klassName\": \"MatrixTransform\",\r\n\r\n\t\t\"value\"\t:\t{\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this.matrix.clone();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t\"matrix\" : {\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this._.matrix;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tclone : /*ScaleTransform*/function() {\r\n\t\t},\r\n\t\t\r\n\t\ttransform : /*Point*/function(/*Point*/point) {\r\n\t\t},\r\n\t\t\r\n\t\t//�w�肳�ꂽ���E�{�b�N�X��ϊ����A��������傤�Ǌi�[�ł���傫���̎����s���E�{�b�N�X��Ԃ��܂��B\r\n\t\ttransformBounds : /*Rect*/function(/*Rect*/rect) {\r\n\t\t},\t\t\r\n\t\t\"_construct\" : function(/*Martix*/matrix) {\r\n            var _ = this._ = {};\r\n\t\t\t\r\n\t\t\t_.matrix = matrix;\r\n\t\t}\r\n\t\t\t\t\r\n\t});\r\n\r\n\treturn numerics.MatrixTransform = MatrixTransform;\r\n\t\r\n});\t\r\n\ndefine('skylark-langx-numerics/Plane',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./numerics\",\r\n\t\"./Matrix3\",\r\n\t\"./Vector3\"\r\n] ,function(\r\n\tklass,\r\n\tnumerics,\r\n\tMatrix3,\r\n\tVector3\r\n) {\r\n\r\n\r\n\tvar _vector1 = new Vector3();\r\n\tvar _vector2 = new Vector3();\r\n\tvar _normalMatrix = new Matrix3();\r\n\r\n\tvar Plane = klass({\r\n\t\t\"klassName\" : \"Plane\",\r\n\r\n\t\tset: function ( normal, constant ) {\r\n\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = constant;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponents: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis.normal.set( x, y, z );\r\n\t\t\tthis.constant = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = - point.dot( this.normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\r\n\r\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( plane ) {\r\n\r\n\t\t\tthis.normal.copy( plane.normal );\r\n\t\t\tthis.constant = plane.constant;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.constant *= - 1;\r\n\t\t\tthis.normal.negate();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSphere: function ( sphere ) {\r\n\r\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t\t},\r\n\r\n\t\tprojectPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'mathsPlane: .projectPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\r\n\r\n\t\t},\r\n\r\n\t\tintersectLine: function ( line, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'mathsPlane: .intersectLine() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar direction = line.delta( _vector1 );\r\n\r\n\t\t\tvar denominator = this.normal.dot( direction );\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\t\treturn target.copy( line.start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsLine: function ( line ) {\r\n\r\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\t\tvar startSign = this.distanceToPoint( line.start );\r\n\t\t\tvar endSign = this.distanceToPoint( line.end );\r\n\r\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsPlane( this );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\treturn sphere.intersectsPlane( this );\r\n\r\n\t\t},\r\n\r\n\t\tcoplanarPoint: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'mathsPlane: .coplanarPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\r\n\r\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\r\n\r\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\r\n\r\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\tthis.constant = - referencePoint.dot( normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.constant -= offset.dot( this.normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( plane ) {\r\n\r\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t\t},\r\n\r\n\r\n\t\t\"_construct\" : function( normal, constant ) {\r\n\r\n\t\t\t// normal is assumed to be normalized\r\n\r\n\t\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\r\n\t\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\treturn numerics.Plane = Plane;\r\n});\ndefine('skylark-langx-numerics/RotateTransform',[\r\n    \"./numerics\",\r\n\t\"./Transform\",\r\n\t\"./MatrixTransform\"\r\n],function(numerics,Transform,Matrix) {\r\n\r\n\r\n    var RotateTransform = numerics.RotateTransform = Transform.inherit({\r\n        \"klassName\": \"RotateTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                return Matrix.rotateAt(this.angle, this.centerX, this.centerY);\r\n            }\r\n        },\r\n\r\n        \"angle\": {\r\n            get : function() {\r\n                return this._.angle;\r\n            }\r\n        },\r\n        // cy: Number\r\n        //\t\tThe Y coordinate of the center of the circle, default value 0.\r\n        \"centerX\": {\r\n            get : function() {\r\n                return this._.centerX;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe radius, default value 100.\r\n        \"centerY\": {\r\n            get : function() {\r\n                return this._.centerY;\r\n            }\r\n        },\r\n\r\n\t\tclone : /*ScaleTransform*/function() {\r\n\t\t},\r\n\t\t\r\n\t\ttransform : /*Point*/function(/*Point*/point) {\r\n\t\t},\r\n\t\t\r\n\t\ttransformBounds : /*Rect*/function(/*Rect*/rect) {\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(/*Number*/angle,/*Number*/centerX,/*Number*/centerY) {\r\n\t\t\tvar _ = this._ = {};\r\n\t\t\t_.angle = angle ? angle :0;\r\n\t\t\t_.centerX = centerX ? centerX :0;\r\n\t\t\t_.centerY = centerY ? centerY :0;\r\n\t\t}\r\n\t});\r\n\r\n\treturn RotateTransform;\r\n\t\r\n});\t\r\n\ndefine('skylark-langx-numerics/ScaleTransform',[\r\n    \"./numerics\",\r\n    \"./Transform\",\r\n    \"./MatrixTransform\"\r\n], function(numerics, Transform, Matrix) {\r\n\r\n   var ScaleTransform =  Transform.inherit({\r\n        \"klassName\": \"ScaleTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                    return Matrix.scaleAt(this.scaleX, this.scaleY, this.centerX, this.centerY);\r\n            }\r\n        },\r\n\r\n        \"scaleX\": {\r\n            get : function() {\r\n                return this._.scaleX;\r\n            }\r\n        },\r\n\r\n        \"scaleY\": {\r\n            get : function() {\r\n                return this._.scaleY;\r\n            }\r\n        },\r\n\r\n        // cy: Number\r\n        //      The Y coordinate of the center of the circle, default value 0.\r\n        \"centerX\": {\r\n            get : function() {\r\n                return this._.centerX;\r\n            }\r\n        },\r\n        // r: Number\r\n        //      The radius, default value 100.\r\n        \"centerY\": {\r\n            get : function() {\r\n                return this._.centerY;\r\n            }\r\n        },\r\n\r\n        clone: /*ScaleTransform*/ function() {},\r\n\r\n        transform: /*Point*/ function( /*Point*/ point) {},\r\n\r\n        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},\r\n\r\n        \"_construct\": function( /*Number*/ scaleX, /*Number*/ scaleY, /*Number*/ centerX, /*Number*/ centerY) {\r\n            var _ = this._ = {};\r\n\r\n            _.scaleX = scaleX ? scaleX : 1;\r\n            _.scaleY = scaleY ? scaleY : 1;\r\n            _.centerX = centerX ? centerX : 0;\r\n            _.centerY = centerY ? centerY : 0;\r\n        }\r\n    });\r\n\r\n    return numerics.ScaleTransform = ScaleTransform;\r\n\r\n});\r\n\ndefine('numerics',[\r\n    \"skylark-langx-ns\",\r\n    \"skylark-langx-types\"\r\n],function(skylark,types){\r\n\r\n\treturn  skylark.attach(\"langx.numerics\",{\r\n\t\ttoFinite : types.toFinite,\r\n\t\ttoNumber : types.toNumber,\r\n\t\ttoInteger : types.toInteger\r\n\t});\r\n});\ndefine('skylark-langx-numerics/SkewTransform',[\r\n    \"../numerics\",\r\n    \"./Transform\",\r\n    \"./MatrixTransform\"\r\n], function(numerics, Transform, Matrix) {\r\n\r\n   var SkewTransform = Transform.inherit({\r\n        \"klassName\": \"SkewTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                    return Matrix.scaleAt(this.skewX, this.skewY);\r\n            }\r\n        },\r\n\r\n        \"skewX\": {\r\n            get : function() {\r\n                return this._.skewX;\r\n            }\r\n        },\r\n\r\n        \"skewY\": {\r\n            get : function() {\r\n                return this._.skewY;\r\n            }\r\n        },\r\n\r\n        clone: /*SkewTransform*/ function() {},\r\n\r\n        transform: /*Point*/ function( /*Point*/ point) {},\r\n\r\n        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},\r\n\r\n        \"_construct\": function( /*Number*/ skewX, /*Number*/ skewY) {\r\n            var _ = this._ = {};\r\n\r\n            _.skewX = skewX ? skewX : 0;\r\n            _.skewY = skewY ? skewY : 0;\r\n        }\r\n    });\r\n\r\n    return numerics.SkewTransform = SkewTransform;\r\n\r\n});\r\n\ndefine('skylark-langx-numerics/Vector2',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./numerics\"\r\n] ,function(klass,numerics) {\r\n\r\n\tvar Vector2 = klass({\r\n\t\t\"klassName\" : \"Vector2\",\r\n\r\n\t\tset: function ( x, y ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( v ) {\r\n\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivide: function ( v ) {\r\n\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix3: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t\t},\r\n\r\n\t\tcross: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.y - this.y * v.x;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tangle: function () {\r\n\r\n\t\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\t\tvar angle = Math.atan2( - this.y, - this.x ) + Math.PI;\r\n\r\n\t\t\treturn angle;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSquared: function ( v ) {\r\n\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\t\treturn dx * dx + dy * dy;\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\r\n\t\trotateAround: function ( center, angle ) {\r\n\r\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\t\tvar x = this.x - center.x;\r\n\t\t\tvar y = this.y - center.y;\r\n\r\n\t\t\tthis.x = x * c - y * s + center.x;\r\n\t\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t\"_construct\" : function ( x, y ) {\r\n\r\n\t\t\tthis.x = x || 0;\r\n\t\t\tthis.y = y || 0;\r\n\r\n\t\t}\r\n\r\n\r\n\t});\r\n\r\n\r\n\t/*\r\n\tObject.defineProperties( Vector2.prototype, {\r\n\r\n\t\t\"width\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.x = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t\"height\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.y = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\t*/\r\n\r\n\r\n\r\n\r\n\treturn numerics.Vector2 = Vector2 ;\r\n});\r\n\ndefine( 'skylark-langx-numerics/TransformMatrix',[\r\n    \"skylark-langx-klass\",\r\n    \"./numerics\",\r\n    \"./Vector2\"\r\n], function(klass,numerics,Vector2){\r\n\t// reference easeljs/numerics/Matrix2D  and dojox/gfx/matrix\r\n\t\r\n\tvar DEG_TO_RAD = Math.PI/180;\r\n\tvar _degToRadCache = {};\r\n\tvar degToRad = function(degree){\r\n\t\treturn _degToRadCache[degree] || (_degToRadCache[degree] = (Math.PI * degree / 180));\r\n\t};\r\n\tvar radToDeg = function(radian){ return radian / Math.PI * 180; };\r\n\t\r\n\r\n\t//Represents a 3 x 3 affine transformation matrix used for transformation in 2-D space.\r\n\t//|----------|\r\n\t//|m11|m21|dx| \r\n\t//|----------|\r\n\t//|m12|m22|dy|\r\n\t//|----------|\r\n\t//|  0|  0| 1|\r\n\t//|----------|\r\n\t\r\n    var TransformMatrix =  klass({\r\n        \"klassName\": \"TransformMatrix\",\r\n\r\n\t\t\"_multiplyPoint\"\t: \tfunction(p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies the matrix to a point\r\n\t\t\t// p: Point\r\n\t\t\t//\t\ta point\r\n\t\t\t// returns: Point\r\n\t\t\tvar _ = this._,\r\n\t\t\t\tx = p.x * _.m11 + p.y * _.m21  + _.dx,\r\n\t\t\t    y = p.x * _.m12 +  p.y * _.m22 + _.dy;\r\n\r\n\t\t\treturn new Vector2(x,y); // Point\r\n\t\t},\r\n\r\n       \"m11\": {\r\n       \t\t//Position (0, 0) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m11;\r\n            }\r\n        },\r\n\r\n       \"m12\": {\r\n       \t\t//Position (0, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m12;\r\n            }\r\n        },\r\n\r\n       \"m21\": {\r\n       \t\t//Position (1, 0) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m21;\r\n            }\r\n        },\r\n\r\n       \"m22\": {\r\n       \t\t//Position (1, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m22;\r\n            }\r\n        },\r\n\r\n       \"dx\": {\r\n       \t\t// Position (2, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.dx;\r\n            }\r\n        },\r\n\r\n       \"dy\": {\r\n       \t\t// Position (2, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.dy;\r\n            }\r\n        },\r\n\r\n       \"alpha\": {\r\n       \t\t// Property representing the alpha that will be applied to a display object. This is not part of matrix\r\n       \t\t// operations, but is used for operations like getConcatenatedMatrix to provide concatenated alpha values.\r\n            get : function() {\r\n                return this._.alpha;\r\n            }\r\n        },\r\n\r\n       \"shadow\": {\r\n       \t\t// Property representing the shadow that will be applied to a display object. This is not part of matrix\r\n       \t\t// operations, but is used for operations like getConcatenatedMatrix to provide concatenated shadow values..\r\n            get : function() {\r\n                return this._.shadow;\r\n            }\r\n        },\r\n\r\n       \"compositeOperation\": {\r\n\t\t\t/**\r\n\t\t\t * Property representing the compositeOperation that will be applied to a display object. This is not part of\r\n\t\t\t * matrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated\r\n\t\t\t * compositeOperation values. You can find a list of valid composite operations at:\r\n\t\t\t * <a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>\r\n\t\t\t * @property compositeOperation\r\n\t\t\t * @type String\r\n\t\t\t **/\r\n            get : function() {\r\n                return this._.compositeOperation;\r\n            }\r\n        },\r\n\r\n        //Converts the specified point with Matrix and returns the result.\r\n\t\tmultiplyPoint: /*Vector2*/function(/*Vector2 */ p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies the matrix to a point\r\n\t\t\treturn this._multiplyPoint(p); // Vector2\r\n\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * 指定した矩形を Matrix で変換し、その結果を返します。\r\n\t\t\t\t */\r\n\t\tmultiplyRectangle: /*Rect*/function(/*Rect*/ rect){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tApplies the matrix to a rectangle.\r\n\t\t\t// returns: Rect\r\n\t\t\tif(this.isIdentity())\r\n\t\t\t\treturn rect.clone(); // Rect\r\n\t\t\tvar p0 = this.multiplyPoint(rect.leftTop),\r\n\t\t\t\tp1 = this.multiplyPoint(rect.leftBottom),\r\n\t\t\t\tp2 = this.multiplyPoint(rect.right),\r\n\t\t\t\tp3 = this.multiplyPoint(rect.rightBottom),\r\n\t\t\t\tminx = Math.min(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tminy = Math.min(p0.y, p1.y, p2.y, p3.y),\r\n\t\t\t\tmaxx = Math.max(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tmaxy = Math.max(p0.y, p1.y, p2.y, p3.y);\r\n\t\t\treturn new Rect(minx,miny,maxx-minx,maxy-miny);  // Rect\r\n\t\t},\r\n\t\t/**\r\n\t\t * Concatenates the specified matrix properties with this matrix. All parameters are required.\r\n\t\t * @method prepend\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tprepend : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar tx1 = this.dx;\r\n\t\t\tif (m11 != 1 || m12 != 0 || m21 != 0 || m22 != 1) {\r\n\t\t\t\tvar a1 = this.m11;\r\n\t\t\t\tvar c1 = this.m21;\r\n\t\t\t\tthis.m11  = a1*m11+this.m12*m21;\r\n\t\t\t\tthis.m12  = a1*m12+this.m12*m22;\r\n\t\t\t\tthis.m21  = c1*m11+this.m22*m21;\r\n\t\t\t\tthis.m22  = c1*m12+this.m22*m22;\r\n\t\t\t}\r\n\t\t\tthis.dx = tx1*m11+this.dy*m21+dx;\r\n\t\t\tthis.dy = tx1*m12+this.dy*m22+dy;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified matrix properties with this matrix. All parameters are required.\r\n\t\t * 指定した Matrixをこの Matrixに追加します。\r\n\t\t * @method append\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappend : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar b1 = this.m12;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar d1 = this.m22;\r\n\r\n\t\t\tthis.m11  = m11*a1+m12*c1;\r\n\t\t\tthis.m12  = m11*b1+m12*d1;\r\n\t\t\tthis.m21  = m21*a1+m22*c1;\r\n\t\t\tthis.m22  = m21*b1+m22*d1;\r\n\t\t\tthis.dx = dx*a1+dy*c1+this.dx;\r\n\t\t\tthis.dy = dx*b1+dy*d1+this.dy;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Prepends the specified matrix with this matrix.\r\n\t\t * @method prependMatrix\r\n\t\t * @param {Matrix} matrix\r\n\t\t **/\r\n\t\tprependMatrix : function(matrix) {\r\n\t\t\tthis.prepend(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);\r\n\t\t\tthis.prependProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified matrix with this matrix.\r\n\t\t * 指定した Matrixをこの Matrixに追加します。\r\n\t\t * @method appendMatrix\r\n\t\t * @param {Matrix} matrix\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappendMatrix : function(matrix) {\r\n\t\t\tthis.append(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);\r\n\t\t\tthis.appendProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.\r\n\t\t * For example, you can use this to generate a matrix from a display object: var mtx = new Matrix();\r\n\t\t * mtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n\t\t * @method prependTransform\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @param {Number} scaleX\r\n\t\t * @param {Number} scaleY\r\n\t\t * @param {Number} rotation\r\n\t\t * @param {Number} skewX\r\n\t\t * @param {Number} skewY\r\n\t\t * @param {Number} regX Optional.\r\n\t\t * @param {Number} regY Optional.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tprependTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\t\tif (rotation%360) {\r\n\t\t\t\tvar r = rotation*DEG_TO_RAD;\r\n\t\t\t\tvar cos = Math.cos(r);\r\n\t\t\t\tvar sin = Math.sin(r);\r\n\t\t\t} else {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\tsin = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (regX || regY) {\r\n\t\t\t\t// append the registration offset:\r\n\t\t\t\tthis.dx -= regX; this.dy -= regY;\r\n\t\t\t}\r\n\t\t\tif (skewX || skewY) {\r\n\t\t\t\t// TODO: can this be combined into a single prepend operation?\r\n\t\t\t\tskewX *= DEG_TO_RAD;\r\n\t\t\t\tskewY *= DEG_TO_RAD;\r\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\r\n\t\t\t\tthis.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n\t\t\t} else {\r\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generates matrix properties from the specified display object transform properties, and appends them with this matrix.\r\n\t\t * For example, you can use this to generate a matrix from a display object: var mtx = new Matrix();\r\n\t\t * mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n\t\t * @method appendTransform\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @param {Number} scaleX\r\n\t\t * @param {Number} scaleY\r\n\t\t * @param {Number} rotation\r\n\t\t * @param {Number} skewX\r\n\t\t * @param {Number} skewY\r\n\t\t * @param {Number} regX Optional.\r\n\t\t * @param {Number} regY Optional.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappendTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\t\tif (rotation%360) {\r\n\t\t\t\tvar r = rotation*DEG_TO_RAD;\r\n\t\t\t\tvar cos = Math.cos(r);\r\n\t\t\t\tvar sin = Math.sin(r);\r\n\t\t\t} else {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\tsin = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (skewX || skewY) {\r\n\t\t\t\t// TODO: can this be combined into a single append?\r\n\t\t\t\tskewX *= DEG_TO_RAD;\r\n\t\t\t\tskewY *= DEG_TO_RAD;\r\n\t\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\r\n\t\t\t}\r\n\r\n\t\t\tif (regX || regY) {\r\n\t\t\t\t// prepend the registration offset:\r\n\t\t\t\tthis.dx -= regX*this.m11+regY*this.m21; \r\n\t\t\t\tthis.dy -= regX*this.m12+regY*this.m22;\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a rotation transformation to the matrix.\r\n\t\t * この Matrix の原点を中心とする指定した角度の回転を適用します。\r\n\t\t * @method rotate\r\n\t\t * @param {Number} angle The angle in degrees.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\trotate : function(angle) {\r\n\t\t\tvar cos = Math.cos(angle);\r\n\t\t\tvar sin = Math.sin(angle);\r\n\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar tx1 = this.dx;\r\n\r\n\t\t\tthis.m11 = a1*cos-this.m12*sin;\r\n\t\t\tthis.m12 = a1*sin+this.m12*cos;\r\n\t\t\tthis.m21 = c1*cos-this.m22*sin;\r\n\t\t\tthis.m22 = c1*sin+this.m22*cos;\r\n\t\t\tthis.dx = tx1*cos-this.dy*sin;\r\n\t\t\tthis.dy = tx1*sin+this.dy*cos;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a skew transformation to the matrix.\r\n\t\t * @method skew\r\n\t\t * @param {Number} skewX The amount to skew horizontally in degrees.\r\n\t\t * @param {Number} skewY The amount to skew vertically in degrees.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tskew : function(skewX, skewY) {\r\n\t\t\tskewX = skewX*DEG_TO_RAD;\r\n\t\t\tskewY = skewY*DEG_TO_RAD;\r\n\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a scale transformation to the matrix.\r\n\t\t * @method scale\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tscale : function(x, y) {\r\n\t\t\tthis.m11 *= x;\r\n\t\t\tthis.m22 *= y;\r\n\t\t\tthis.dx *= x;\r\n\t\t\tthis.dy *= y;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Translates the matrix on the x and y axes.\r\n\t\t * @method translate\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\ttranslate : function(x, y) {\r\n\t\t\tthis.dx += x;\r\n\t\t\tthis.dy += y;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).\r\n\t\t * @method identity\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tidentity : function() {\r\n\t\t\tthis.alpha = this.m11 = this.m22 = 1;\r\n\t\t\tthis.m12 = this.m21 = this.dx = this.dy = 0;\r\n\t\t\tthis.shadow = this.compositeOperation = null;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Inverts the matrix, causing it to perform the opposite transformation.\r\n\t\t * @method invert\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tinvert : function() {\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar b1 = this.m12;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar d1 = this.m22;\r\n\t\t\tvar tx1 = this.dx;\r\n\t\t\tvar n = a1*d1-b1*c1;\r\n\r\n\t\t\tthis.m11 = d1/n;\r\n\t\t\tthis.m12 = -b1/n;\r\n\t\t\tthis.m21 = -c1/n;\r\n\t\t\tthis.m22 = a1/n;\r\n\t\t\tthis.dx = (c1*this.dy-d1*tx1)/n;\r\n\t\t\tthis.dy = -(a1*this.dy-b1*tx1)/n;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns true if the matrix is an identity matrix.\r\n\t\t * @method isIdentity\r\n\t\t * @return {Boolean}\r\n\t\t **/\r\n\t\tisIdentity : function() {\r\n\t\t\treturn this.dx == 0 && this.dy == 0 && this.m11 == 1 && this.m12 == 0 && this.m21 == 0 && this.m22 == 1;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that this these values\r\n\t\t * may not match the transform properties you used to generate the matrix, though they will produce the same visual\r\n\t\t * results.\r\n\t\t * @method decompose\r\n\t\t * @param {Object} target The object to apply the transform properties to. If null, then a new object will be returned.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tdecompose : function(target) {\r\n\t\t\t// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation\r\n\t\t\t// even when scale is negative\r\n\t\t\tif (target == null) { target = {}; }\r\n\t\t\ttarget.x = this.dx;\r\n\t\t\ttarget.y = this.dy;\r\n\t\t\ttarget.scaleX = Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12);\r\n\t\t\ttarget.scaleY = Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22);\r\n\r\n\t\t\tvar skewX = Math.atan2(-this.m21, this.m22);\r\n\t\t\tvar skewY = Math.atan2(this.m12, this.m11);\r\n\r\n\t\t\tif (skewX == skewY) {\r\n\t\t\t\ttarget.rotation = skewY/DEG_TO_RAD;\r\n\t\t\t\tif (this.m11 < 0 && this.m22 >= 0) {\r\n\t\t\t\t\ttarget.rotation += (target.rotation <= 0) ? 180 : -180;\r\n\t\t\t\t}\r\n\t\t\t\ttarget.skewX = target.skewY = 0;\r\n\t\t\t} else {\r\n\t\t\t\ttarget.skewX = skewX/DEG_TO_RAD;\r\n\t\t\t\ttarget.skewY = skewY/DEG_TO_RAD;\r\n\t\t\t}\r\n\t\t\treturn target;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reinitializes all matrix properties to those specified.\r\n\t\t * @method appendProperties\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\treinitialize : function(m11,m12,m21,m22,dx,dy,alpha,shadow,compositeOperation) {\r\n\t\t\tthis._initialize(m11,m12,m21,m22,dx,dy);\r\n\t\t\tthis.alpha = alpha || 1;\r\n\t\t\tthis.shadow = shadow;\r\n\t\t\tthis.compositeOperation = compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified visual properties to the current matrix.\r\n\t\t * @method appendProperties\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tappendProperties : function(alpha, shadow, compositeOperation) {\r\n\t\t\tthis.alpha *= alpha;\r\n\t\t\tthis.shadow = shadow || this.shadow;\r\n\t\t\tthis.compositeOperation = compositeOperation || this.compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Prepends the specified visual properties to the current matrix.\r\n\t\t * @method prependProperties\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tprependProperties : function(alpha, shadow, compositeOperation) {\r\n\t\t\tthis.alpha *= alpha;\r\n\t\t\tthis.shadow = this.shadow || shadow;\r\n\t\t\tthis.compositeOperation = this.compositeOperation || compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t *Multiply Matrix by another Matrix.\r\n\t\t */\r\n\t\tmultiply: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcombines matrices by multiplying them sequentially in the given order\r\n\t\t\t// matrix: Matrix\r\n\t\t\t//\t\ta 2D matrix-like object,\r\n\t\t\t//\t\tall subsequent arguments are matrix-like objects too\r\n\r\n\t\t\t// combine matrices\r\n\t\t\tvar m11 = this.m11,m12 = this.m12,m21 = this.m21,m22=this.m22,dx=this.dx,dy=this.dy;\r\n\t\t\tvar r = matrix;\r\n\t\t\tthis.m11 = m11 * r.m11 + m21 * r.m12;\r\n\t\t\tthis.m12 = m12 * r.m11 + m22 * r.m12;\r\n\t\t\tthis.m21 = m11 * r.m21 + m21 * r.m22;\r\n\t\t\tthis.m22 = m12 * r.m21 + m22 * r.m22;\r\n\t\t\tthis.dx =  m11 * r.dx + m21 * r.dy + dx;\r\n\t\t\tthis.dy =  m12 * r.dx + m22 * r.dy + dy;\r\n\t\t\treturn this // Matrix\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a clone of the Matrix instance.\r\n\t\t * @method clone\r\n\t\t * @return {Matrix} a clone of the Matrix instance.\r\n\t\t **/\r\n\t\tclone : function() {\r\n\r\n\t\t\tvar _ = this._,\r\n\t\t\t\tmtx = new Matrix(_.m11, _.m12, _.m21, _.m22, _.dx, _.dy);\r\n\t\t\tmtx.shadow = this.shadow;\r\n\t\t\tmtx.alpha = this.alpha;\r\n\t\t\tmtx.compositeOperation = this.compositeOperation;\r\n\t\t\treturn mtx;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a string representation of this object.\r\n\t\t * @method toString\r\n\t\t * @return {String} a string representation of the instance.\r\n\t\t **/\r\n\t\ttoString : function() {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn \"[Matrix (m11=\"+_.m11+\" m12=\"+_.m12+\" m21=\"+_.m21+\" m22=\"+_.m22+\" dx=\"+_.dx+\" dy=\"+_.dy+\")]\";\r\n\t\t},\r\n\t\t\r\n\t\t\"_construct\" : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar _ = this._ = {};\r\n\t\t\t_.m11 = m11 || 1;\r\n\t\t\t_.m12 = m12 || 0;\r\n\t\t\t_.m21 = m21 || 0;\r\n\t\t\t_.m22 = m22 || 1;\r\n\t\t\t_.dx = dx || 0;\r\n\t\t\t_.dy = dy || 0;\r\n\t\t}\r\n\r\n\t});\r\n\t\r\n\tObject.assign(Matrix,{\r\n\t\ttranslate: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a translation matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to translate (move) points by specified offsets.\r\n\t\t\t// a: Number\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1|   0| a|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   1| b|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\r\n\t\t\treturn new Matrix(1,0,0,1,a,b); // Matrix\r\n\t\t},\r\n\t\tscale: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a scaling matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to scale (magnify) points by specified offsets.\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  a|   0| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   b| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\treturn new Matrix(a,0,0,b?b:a,0,0); // Matrix\r\n\t\t},\r\n\t\trotate: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |cos|-sin| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |sin| cos| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar cos = Math.cos(angle);\r\n\t\t\tvar sin = Math.sin(angle);\r\n\t\t\treturn new Matrix(cos,sin,-sin,cos,0,0); // Matrix\r\n\t\t},\r\n\t\trotateg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSeerotate() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.rotate(degToRad(degree)); // Matrix\r\n\t\t},\r\n\t\tskewX: function(angle) {\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1| tan| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   1| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar tan = Math.tan(angle);\r\n\t\t\treturn new Matrix(1,0,tan,1); // Matrix\r\n\t\t},\r\n\t\tskewXg: function(degree){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox/gfx/matrix.skewX() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.skewX(degToRad(degree)); // dojox/gfx/matrix.Matrix\r\n\t\t},\r\n\t\tskewY: function(angle){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1|   0| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |tan|   1| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar tan = Math.tan(angle);\r\n\r\n\t\t\treturn new Matrix(1,tan,0,1); // Matrix\r\n\t\t},\r\n\t\tskewYg: function(degree){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee skewY() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.skewY(degToRad(degree)); // Matrix\r\n\t\t},\r\n\t\treflect: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a reflection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to reflect points around a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a: dojox/gfx.Point|Number\r\n\t\t\t//\t\ta point-like object, which specifies a vector of reflection, or an X value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta Y value\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length == 1){\r\n\t\t\t\tb = a.y;\r\n\t\t\t\ta = a.x;\r\n\t\t\t}\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, \r\n\t\t\t\txx=2 * a2 / n2 - 1, \r\n\t\t\t\txy = 2 * a * b / n2,\r\n\t\t\t\tyx = xy,\r\n\t\t\t\tyy = 2 * b2 / n2 - 1;\r\n\t\t\treturn new Matrix(xx,yx,xy, yy); // Matrix\r\n\t\t},\r\n\t\tproject: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an orthogonal projection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to project points orthogonally on a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a:   Number\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: Matrix\r\n\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, \r\n\t\t\t\txx = a2 / n2,\r\n\t\t\t\txy = a * b / n2\r\n\t\t\t\tyx = xy,\r\n\t\t\t\tyy = b2 / n2;\r\n\t\t\treturn new Matrix(xx,yx,xy,yy); // Matrix\r\n\t\t},\r\n\r\n\t\t// common operations\r\n\r\n\t\t// high level operations\r\n\r\n\t\t_sandwich: function(matrix, x, y){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix at a central point\r\n\t\t\t// matrix: Matrix\r\n\t\t\t//\t\ta 2D matrix-like object, which is applied at a central point\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tan x component of the central point\r\n\t\t\t// y: Number\r\n\t\t\t//\t\ta y component of the central point\r\n\t\t\treturn this.translate(x, y).multiply(matrix)\r\n\t\t\t                           .multiply(this.translate(-x, -y)); // Matrix\r\n\t\t},\r\n\t\tscaleAt: function(a, b, c, d){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tscales a picture using a specified point as a center of scaling\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with scale().\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate, or a uniform scaling factor used for both coordinates\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// c: Number|Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// d: Number\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tswitch(arguments.length){\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t// a and b are scale factor components, c and d are components of a point\r\n\t\t\t\t\treturn this._sandwich(this.scale(a, b), c, d); // Matrix\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tif(typeof c == \"number\"){\r\n\t\t\t\t\t\treturn this._sandwich(this.scale(a), b, c); // Matrix\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this._sandwich(this.scale(a, b), c.x, c.y); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.scale(a), b.x, b.y); // Matrix\r\n\t\t},\r\n\t\trotateAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with rotate().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.rotate(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.rotate(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\trotategAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with rotateg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.rotateg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.rotateg(degree), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewXAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewX().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewX(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewX(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewXgAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewXg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewXg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewXg(degree), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewYAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewY().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewY(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewY(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewYgAt: function(/* Number */ degree, /* Number||Point */ a, /* Number? */ b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewYg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewYg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewYg(degree), a.x, a.y); // Matrix\r\n\t\t}\r\n\t\r\n\t\r\n\t});\r\n\r\n\treturn numerics.TransformMatrix = TransformMatrix;\r\n});\r\n\ndefine('skylark-langx-numerics/TranslateTransform',[\r\n    \"./numerics\",\r\n    \"./Transform\",\r\n    \"./MatrixTransform\"\r\n],function(numerics,Transform,Matrix,Point,Rect) {\r\n\r\n    //|1   0   dx|\r\n    //|0   1   dy|\r\n    //|0   0    1|\r\n\r\n   var TranslateTransform =  Transform.inherit({\r\n        \"klassName\": \"TranslateTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                    return Matrix.scaleAt(this.x, this.y);\r\n            }\r\n        },\r\n\r\n        \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n\r\n        clone: /*SkewTransform*/ function() {},\r\n\r\n        transform: /*Point*/ function( /*Point*/ point) {},\r\n\r\n        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},\r\n\r\n        \"init\": function( /*Number*/ x, /*Number*/ y) {\r\n            var _ = this._;\r\n\r\n            _.x = x ? x : 0;\r\n            _.y = y ? y : 0;\r\n        }\r\n    });\r\n\r\n    return numerics.TranslateTransform =TranslateTransform;\r\n});\t\r\n\ndefine('skylark-langx-numerics/Vector4',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./numerics\"\r\n] ,function(klass,numerics) {\r\n\r\n\tvar Vector4 = klass({\r\n\t\t\"klassName\" : \"Vector4\",\r\n\r\n\t\tset: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\t\t\tthis.w = w;\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\t\tthis.z = scalar;\r\n\t\t\tthis.w = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( z ) {\r\n\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( w ) {\r\n\r\n\t\t\tthis.w = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tcase 3: this.w = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tcase 3: return this.w;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\t\t\tthis.w += v.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\t\t\tthis.w += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\t\t\tthis.w = a.w + b.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\t\t\tthis.w += v.w * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\t\t\tthis.w -= v.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\t\t\tthis.w -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\t\t\tthis.w = a.w - b.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\t\t\tthis.w *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t\t// q is assumed to be normalized\r\n\r\n\t\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\t\tthis.x = 1;\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t\tthis.z = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = q.x / s;\r\n\t\t\t\tthis.y = q.y / s;\r\n\t\t\t\tthis.z = q.z / s;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\t\tte = m.elements,\r\n\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t\t// singularity found\r\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\t\tangle = Math.PI;\r\n\r\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\t\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\t\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\t\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\t\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\t\t\tthis.w = Math.round( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\t\t\tthis.w = - this.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\t\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\t\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'Vector4: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\t\t\tthis.z = attribute.getZ( index );\r\n\t\t\tthis.w = attribute.getW( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\r\n\t\t\"_construct\" :function ( x, y, z, w ) {\r\n\r\n\t\t\tthis.x = x || 0;\r\n\t\t\tthis.y = y || 0;\r\n\t\t\tthis.z = z || 0;\r\n\t\t\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n\t\t}\r\n\r\n\t});\r\n\r\n/*\r\n\tObject.defineProperties( Vector4.prototype, {\r\n\r\n\t\t\"width\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.z = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t\"height\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.w;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.w = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n*/\r\n\r\n\treturn numerics.Vector4 = Vector4 ;\r\n\r\n});\ndefine('skylark-langx-numerics/main',[\r\n\t\"./numerics\",\r\n\t\"./Euler\",\r\n\t\"./maths\",\r\n\t\"./Matrix3\",\r\n\t\"./Matrix4\",\r\n\t\"./MatrixTransform\",\r\n\t\"./Plane\",\r\n\t\"./Quaternion\",\r\n\t\"./RotateTransform\",\r\n\t\"./ScaleTransform\",\r\n\t\"./SkewTransform\",\r\n\t\"./Transform\",\r\n\t\"./TransformMatrix\",\r\n\t\"./TranslateTransform\",\r\n\t\"./Vector2\",\r\n\t\"./Vector3\",\r\n\t\"./Vector4\"\r\n],function(numerics){\r\n\treturn numerics;\r\n});\ndefine('skylark-langx-numerics', ['skylark-langx-numerics/main'], function (main) { return main; });\n\n"]}